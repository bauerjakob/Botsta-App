schema {
  query: BotstaQuery
  mutation: BotstaMutation
  subscription: BotstaSubscription
}

type BotstaQuery {
  # Returns all chatrooms of current user.
  chatrooms: [GraphChatroomType]

  # Returns list of all registerd users
  getAllUsers: [GraphUserType]

  # Returns informations about the current user.
  whoami: GraphUserType
}

type GraphUserType {
  id: String!
  username: String!
}

type GraphChatroomType {
  id: ID!
  latestMessage: GraphMessageType
  name: String
  type: String!
}

type GraphMessageType {
  id: ID!
  message: String!
}

type BotstaMutation {
  login(name: String!, secret: String!): String

  # Create a new chatroom
  newChatroomGroup(name: String, practicantIds: [String]): GraphChatroomType

  # Create a new chatroom
  newChatroomSingle(practicantId: String): GraphChatroomType

  # Post message to chatroom
  postMessage(chatroomId: String, message: String): GraphMessageType
  register(username: String!, password: String!): String

  # Register new bot
  registerBot(botName: String): String
}

type BotstaSubscription {
  messageReceived(token: String): GraphMessageType
}

